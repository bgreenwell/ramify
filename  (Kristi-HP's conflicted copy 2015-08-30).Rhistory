image(z, axes = FALSE)
contour(z, add = TRUE, drawlabels = FALSE)
par(mar = c(0.1, 0.1, 0.1, 0.1))
x <- y <- linspace(-4*pi, 4*pi, 27)
mg <- meshgrid(x, y)
z <- cos(mg[[1]]^2 + mg[[2]]^2) * exp(-sqrt(mg[[1]]^2 + mg[[2]]^2)/6)
image(z, axes = FALSE)
contour(z, add = TRUE, drawlabels = FALSE)
pdf(file = paste("/home/w108bmg/Desktop/Dropbox/Projects/greenwell_ramify_2015",
"contour.pdf", sep = "/"), width = 7, height = 5)
par(mar = c(0.1, 0.1, 0.1, 0.1))
x <- y <- linspace(-4*pi, 4*pi, 27)
mg <- meshgrid(x, y)
z <- cos(mg[[1]]^2 + mg[[2]]^2) * exp(-sqrt(mg[[1]]^2 + mg[[2]]^2)/6)
image(z, axes = FALSE)
contour(z, add = TRUE, drawlabels = FALSE)
dev.off()
?image
x <- y <- linspace(-4*pi, 4*pi, 50)
mg <- meshgrid(x, y)
z <- cos(mg[[1]]^2 + mg[[2]]^2) * exp(-sqrt(mg[[1]]^2 + mg[[2]]^2)/6)
image(z, axes = FALSE)
contour(z, add = TRUE, drawlabels = FALSE)
mg <- meshgrid(linspace(-4*pi, 4*pi, 27))
z <- cos(mg[[1]]^2 + mg[[2]]^2) * exp(-sqrt(mg[[1]]^2 + mg[[2]]^2)/6)
image(z, axes = FALSE)
contour(z, add = TRUE, drawlabels = FALSE)
?lapply
?image
?as.array
x <- 0:3
y <- c(-1. ,  0.2,  0.9,  2.1)
lm(x, y)
d <- data.frame(x = 0:3, y = c(-1. ,  0.2,  0.9,  2.1))
fm <- lm(y ~ x, data = d)
fitted(fm)
resid(fm)
names(fm)
fm$qr
fm$rank
fm$de.residual
fm$df.residual
names(lm)
names(fm)
fm$effects
fm$xlevels
methods(lm)
methods(lmfit)
methods("lm")
methods(lm.fit)
lm.fit
?lm.fit
fitted
fitted.lm
getAnywhere(fitted.lm)
getAnywhere(fitted.default)
napredict
getAnywhere(napredict)
getAnywhere(napredict.default)
getAnywhere(napredict.lm)
anova.lm
getAnywhere(anova.lm)
llength(list(fm))
length(list(fm))
?lm
terms.lm
getAnywhere(terms.lm)
getAnywhere(terms.lmfit)
getAnywhere(terms)
getAnywhere(terms.default)
lm
fm$terms
?lm
confint(fm)
lm
?model.matrix
model.matrix
model.matrix.lm
model.frame
model.frame.formula
model.frame.default
model.frame.default
?lmfit
?lm.fit
?model.frame
?model.matrix
lm
?lm.fit
lm.fit
MASS::lm.ridge
?MASS::lm.ridge
drop
?drop
m <- matrix(1:4, 2, 2)
m
drop(m)
X <- m
n <- nrow(X)
drop(rep(1/n, n) %*% X^2)^0.5
rep(c(1, 2), 3)
rep(c(1, 2), 3)
caret::RMSE
install.packages("caret")
caret::RMSE
caret::R2
?print.default
getOption("digits")
print.default
source('~/Desktop/Dropbox/devel/ramify/R/pprint.R', echo=TRUE)
pprint(matrix(0, 10, 10))
#' Shorten a Vector
#'
#' Shorten a vector using \code{...} notation.
#'
#' @keywords internal
add_dots <- function(x, pos = 3) {
if (length(x) >= pos + 2) {
c(x[seq_len(pos-1)], "...", x[length(x)])
} else {
x
}
}
#' Describe a Matrix
#'
#' Prints a short description about a matrix.
#'
#' @keywords internal
desc_mat <- function(x) {
paste(paste(dim(x), collapse = " by "), "matrix of", paste0(typeof(x), "s"))
}
pprint(matrix(0, 10, 10))
install.packages("roxygen2")
install.packages("devtools")
pprint(randn(100, 100))
library(ramify)
pprint(randn(100, 100))
pprint(as.matrix(cars))
pprint(as.matrix(mtcars))
pprint(data.matrix(mtcars))
pprint(data.matrix(mtcars), digits = 5)
pprint(data.matrix(mtcars), digits = 7)
getOption("digits")
library(ramify)
pprint(randn(100, 100))
library(ramify)
devtools::load_all(".")
pprint(randn(100, 100))
getOption("digits")
library(ramify)
pprint(randn(100, 100))
pprint(randn(100, 100), digits = 7)
pprint(randn(100, 100), digits = 7)
pprint(randn(100, 100), digits = 7)
pprint(randn(100, 100), digits = 7)
install.packages("testthat")
library(ramify)
library(testthat)
expect_that(flatten(mat("1:3; 4:6; 7:9")), is_identical_to(1:9))
flatten(mat("1:3; 4:6; 7:9"))
library(ramify)
expect_that(eye(3), equals(diag(3)))
expect_that(eye(3), equals(diag(3)))
expect_that(eye(3, 5), equals(diag(1, 3, 5)))
expect_that(eye(5, 3), equals(diag(1, 5, 3)))
m1 <- matrix(c(0.1112850, 0.3735504, 0.7667462, 0.2012106), 2, 2)
m2 <- matrix(c(0.6049852, 0.2716786), 1, 2)
m3 <- matrix(c(0.6049852, 0.2716786), 2, 1)
# Concatenate matrices
expect_that(vcat(m1, m2), equals(rbind(m1, m2)))
expect_that(hcat(m1, m3), equals(cbind(m1, m3)))
expect_that(eye(3), is_identical_to(diag(3)))
expect_that(eye(3, 5), is_identical_to(diag(1, 3, 5)))
expect_that(eye(5, 3), is_identical_to(diag(1, 5, 3)))
expect_that(vcat(m1, m2), is_identical_to(rbind(m1, m2)))
expect_that(hcat(m1, m3), is_identical_to(cbind(m1, m3)))
expect_that(inv(m1), is_identical_to(solve(m1)))
expect_that(size(a1), is_identical_to(c(2, 2, 2)))
expect_that(size(a2), is_identical_to(c(2, 2, 2)))
a1 <- fill(pi, 2, 2, 2)
a2 <- pi * ones(2, 2, 2)
a3 <- array(pi, dim = c(2, 2, 2))
expect_that(a1, is_identical_to(a2))
expect_that(a1, is_identical_to(a3))
expect_that(size(a1), is_identical_to(c(2, 2, 2)))
expect_that(size(a2), is_identical_to(c(2, 2, 2)))
size(a2)
c(2, 2, 2)
expect_that(a1, is_identical_to(a2))
expect_that(a1, is_identical_to(a3))
expect_that(size(a1), is_identical_to(c(2, 2, 2)))
expect_that(size(a1), equals(c(2, 2, 2)))
expect_that(size(a2), equals(c(2, 2, 2)))
size
# Meshgrid (equals)
x <- linspace(0, 1, 3)
y <- linspace(0, 1, 2)
mg <- meshgrid(x, y)
mx <- mat("0, 0.5, 1; 0, 0.5, 1")
my <- mat("0, 0, 0; 1, 1, 1")
expect_that(mg[[1]], is_identical_to(mx))
expect_that(mg[[2]], is_identical_to(my))
m1 <- mat("1, 1, 1, 0, 0;
1, 1, 1, 1, 0;
1, 1, 1, 1, 1")
m2 <- mat("0, 0, 0, 0, 0;
1, 0, 0, 0, 0;
1, 1, 0, 0, 0")
expect_that(tri(3, 5, k = 2), is_identical_to(m1))
expect_that(tri(3, 5, k = -1), is_identical_to(m2))
expect_that(tri(3, 5, diag = FALSE), is_identical_to(m2))
library(ramify)
pprint(randn(100, 100))
examples(meshgrid)
example(meshgrid)
?data.matrix
dmat
pprint(cars)
pprint(list(a=1:3))
data(Boston, package = "MASS")
bos <- data.matrix(Boston)
pprint(bos)
pprint(bos, digits=3)
pprint(bos, digits=2)
pprint(bos)
print(m)
m <- randn(1000, 1000)
print(m)
head(m)
?lm
## Annette Dobson (1990) "An Introduction to Generalized Linear Models".
## Page 9: Plant Weight Data.
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
lm.D9
devtools::install_github("bgreenwell/ramify")
c("a", "b")
class(c("a", "b"))
x <- "abc"
y <- c("a", "b", "c")
length(x)
length(y)
as.matrix(list("a" = 1:3, "b" = 4:6))
as.data.frame(list("a" = 1:3, "b" = 4:6))
data.frame(list("a" = 1:3, "b" = 4:6))
digest
strtoi("hello")
?strtoi
strtoi("h")
strtoi(c("a", "b"))
strtoi(c("0xff", "077", "123"))
strtoi("0xhello")
source('~/Desktop/Kaggle/Forest Cover Type/forest.R', echo=TRUE)
install.packages(c("dplyr", "ggvis", "plyr", "lubridate"))
source('~/Desktop/Kaggle/Forest Cover Type/forest.R', echo=TRUE)
install.packages("randomForest")
source('~/Desktop/Kaggle/Forest Cover Type/forest.R', echo=TRUE)
train
train_grouped
rfModel
rfModel_grouped
?caret
library(caret)
?train
names(getModelInfo())
getModelInfo("rf")
getModelInfo("rf")$rf
train_grouped
?train
length(2:8)
library(doMC); registerDoMC(cores = 5)
install.packages("doMC")
library(doMC); registerDoMC(cores = 5)
# Tune model
set.seed(102)
rf_tune_grid <- list(.mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = NULL,
tuneGrid = rf_tune_grid)
plot(rf_tune)  # plot results
# Function to regroup dummy variables
regroup <- function(data) {
# Set up for new variables
wilderness_id <- grep("Wilderness_Area", names(data))
soil_id <- grep("Soil_Type", names(data))
newdata <- data[, -c(wilderness_id, soil_id)]
newdata$Wilderness <- newdata$Soil <- rep(NA, nrow(newdata))
# Regroup Wilderness factor
for (i in seq_along(wilderness_id)) {
newdata$Wilderness <- ifelse(data[[wilderness_id[i]]] == 1,
paste("Type", i, sep = "_"),
newdata$Wilderness)
}
# Regroup Soil factor
for (j in seq_along(soil_id)) {
newdata$Soil <- ifelse(data[[soil_id[j]]] == 1,
paste("Type", j, sep = "_"),
newdata$Soil)
}
# Return new data frame
newdata$Wilderness <- as.factor(newdata$Wilderness)
newdata$Soil <- as.factor(newdata$Soil)
}
# Training and test data based on grouped factors
train_grouped <- regroup(train)
test_grouped <- regroup(test)
# Tune model
set.seed(102)
rf_tune_grid <- list(.mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = NULL,
tuneGrid = rf_tune_grid)
plot(rf_tune)  # plot results
subset(train_grouped, select = -Cover_Type)
head(train_grouped)
regroup(train)
# Function to regroup dummy variables
regroup <- function(data) {
# Set up for new variables
wilderness_id <- grep("Wilderness_Area", names(data))
soil_id <- grep("Soil_Type", names(data))
newdata <- data[, -c(wilderness_id, soil_id)]
newdata$Wilderness <- newdata$Soil <- rep(NA, nrow(newdata))
# Regroup Wilderness factor
for (i in seq_along(wilderness_id)) {
newdata$Wilderness <- ifelse(data[[wilderness_id[i]]] == 1,
paste("Type", i, sep = "_"),
newdata$Wilderness)
}
# Regroup Soil factor
for (j in seq_along(soil_id)) {
newdata$Soil <- ifelse(data[[soil_id[j]]] == 1,
paste("Type", j, sep = "_"),
newdata$Soil)
}
# Return new data frame
newdata$Wilderness <- as.factor(newdata$Wilderness)
newdata$Soil <- as.factor(newdata$Soil)
newdata
}
# Training and test data based on grouped factors
train_grouped <- regroup(train)
test_grouped <- regroup(test)
# Tune model
set.seed(102)
rf_tune_grid <- list(.mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = NULL,
tuneGrid = rf_tune_grid)
plot(rf_tune)  # plot results
library(caret)
library(doMC); registerDoMC(cores = 5)
library(randomForest)
head(train_grouped)
train_grouped
subset(train_grouped, select = -Cover_Type)
train_grouped$Cover_Type
# Tune model
set.seed(102)
rf_tune_grid <- list(.mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = NULL,
tuneGrid = rf_tune_grid)
plot(rf_tune)  # plot results
train_grouped <- as.data.frame(train_grouped)
library(caret)
library(doMC); registerDoMC(cores = 5)
library(randomForest)
set.seed(102)
rf_tune_grid <- list(.mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = NULL,
tuneGrid = rf_tune_grid)
plot(rf_tune)  # plot results
# Tune model
set.seed(102)
rf_tune_grid <- list(.mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = rf_train_ctrl,
tuneGrid = rf_tune_grid)
plot(rf_tune)  # plot results
# Tune model
set.seed(102)
rf_tune_grid <- list(mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = rf_train_ctrl,
tuneGrid = rf_tune_grid)
plot(rf_tune)  # plot results
install.packages("e1071")
# Tune model
set.seed(102)
rf_tune_grid <- list(mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = rf_train_ctrl,
tuneGrid = rf_tune_grid)
plot(rf_tune)  # plot results
train_grouped
# Tune model
set.seed(102)
rf_tune_grid <- list(mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = rf_train_ctrl,
tuneGrid = rf_tune_grid)
plot(rf_tune)  # plot results
subset(train_grouped, select = -Cover_Type)
colnames(subset(train_grouped, select = -Cover_Type))
set.seed(102)
rf_tune_grid <- list(mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = rf_train_ctrl,
tuneGrid = rf_tune_grid)
class(train_grouped)
set.seed(102)
rf_tune_grid <- list(mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = rf_train_ctrl,
tuneGrid = rf_tune_grid)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = rf_train_ctrl,
tuneGrid = rf_tune_grid)
# Tune model
set.seed(102)
rf_tune_grid <- list(mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = as.matrix(subset(train_grouped, select = -Cover_Type)),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = rf_train_ctrl,
tuneGrid = rf_tune_grid)
plot(rf_tune)  # plot results
rfModel <- randomForest(Cover_Type ~ ., data = train, ntree = 50)
rfModel_grouped <- randomForest(Cover_Type ~ ., data = train_grouped, ntree = 50)
set.seed(102)
rf_tune_grid <- list(mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 50)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = rf_train_ctrl,
tuneLength = 5)
library(caret)
library(doMC); registerDoMC(cores = 5)
library(randomForest)
# Tune model
set.seed(102)
rf_tune_grid <- list(mtry = 2:8)  # tuning parameter grid
rf_train_ctrl <- trainControl(method = "boot", number = 25)
rf_tune <- train(x = subset(train_grouped, select = -Cover_Type),
y = train_grouped$Cover_Type,
method = "rf",
metric = "Accuracy",
trControl = rf_train_ctrl,
tuneLength = 5)
install.packages("C:/Users/Kristi/Desktop/melt_0.7-14.tgz", repos = NULL)
install.binaries
install.binary
?install.binaries
??install.binaries
file.choose()
install.packages("C:\\Users\\Kristi\\Desktop\\melt_0.7-14.tgz", type= "source")
